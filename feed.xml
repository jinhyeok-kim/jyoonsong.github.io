<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://blog.jaeyoon.io/feed.xml" rel="self" type="application/atom+xml"/><link href="http://blog.jaeyoon.io/" rel="alternate" type="text/html" hreflang="ko_KR"/><updated>2018-02-22T08:46:27+00:00</updated><id>http://blog.jaeyoon.io/</id><title type="html">재윤 블로그</title><subtitle>개발/디자인에 관심 많은 대학생이 공부한 것, 생각한 것, 경험한 것들을 기록하고 정리하는 공간입니다.</subtitle><author><name>JaeYoon Song</name></author><entry><title type="html">React에서 PropsType Validation하는 법 (v15.5+ 기준)</title><link href="http://blog.jaeyoon.io/2018/01/react-propstype.html" rel="alternate" type="text/html" title="React에서 PropsType Validation하는 법 (v15.5+ 기준)"/><published>2018-01-11T03:15:30+00:00</published><updated>2018-01-11T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2018/01/react-propstype</id><content type="html" xml:base="http://blog.jaeyoon.io/2018/01/react-propstype.html">&lt;h3 id=&quot;효과&quot;&gt;효과&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;컴포넌트 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;propTypes&lt;/code&gt; 객체를 설정&lt;/strong&gt;하면,&lt;/p&gt; &lt;ul&gt; &lt;li&gt;컴포넌트에서 원하는 props의 type &amp;amp; 전달된 props의 type 이 &lt;em&gt;일치하지 않을 때&lt;/em&gt;, 콘솔에서 오류 메시지가 나타나도록 할 수 있다.&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isRequired&lt;/code&gt;로 필수 props를 지정할 수 있다. 즉 props를 &lt;em&gt;지정하지 않으면&lt;/em&gt; 콘솔에서 오류 메시지가 나타난다.&lt;/li&gt; &lt;/ul&gt; &lt;figure&gt; &lt;img data-action=&quot;zoom&quot; src=&quot;https://velopert.com/wp-content/uploads/2016/03/%EC%9D%B4%EB%AF%B8%EC%A7%80-3-1.png&quot; alt=&quot;콘솔의 오류 메시지 예시&quot; /&gt; &lt;figcaption&gt;콘솔의 오류 메시지 예시&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;설치&quot;&gt;설치&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;React v15.5부터는 PropTypes는 deprecated 되고 prop-types라는 다른 패키지로 이동되어, &lt;strong&gt;따로 설치&lt;/strong&gt;하지 않으면 에러가 난다. (참고: https://reactjs.org/docs/typechecking-with-proptypes.html)&lt;/p&gt; &lt;/blockquote&gt; &lt;ul&gt; &lt;li&gt;설치 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install —save prop-types&lt;/code&gt;&lt;/li&gt; &lt;li&gt;사용되는 컴포넌트마다 임포트해준다 &lt;code class=&quot;highlighter-rouge&quot;&gt;import PropTypes from 'prop-types';&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;사용&quot;&gt;사용&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;이전 버전의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;title: React.PropTypes.stinrg&lt;/code&gt; 처럼 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;를 붙여줘야 한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;PropTypes&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;에서 분리되기 이전이기 때문.&lt;/p&gt; &lt;/blockquote&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/components/Content.js&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRequired&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;하지만 위처럼 일일이 작성하면 귀찮으니 아래 &lt;a href=&quot;https://reactjs.org/docs/typechecking-with-proptypes.html&quot;&gt;공식문서의 예시&lt;/a&gt;와 같이 Custom Validator 함수를 정의하는 것이 좋은 방법이다. Array 혹은 Object를 사용하는 버전도 있다.&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'prop-types'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 선언해둔다 (디폴트로 optional)&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A React element.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// an instance of a class. This uses JS's instanceof operator.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instanceOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ensure that your prop is limited to specific values by treating it as an enum.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oneOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'News'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Photos'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An object that could be one of many types&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalUnion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oneOfType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;instanceOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An array of a certain type&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalArrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An object with property values of a certain type&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalObjectOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;objectOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// An object taking on a particular shape&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;optionalObjectWithShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 위의 것들 중 어느 것이든 isRequired와 묶을 수 있다&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;requiredFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 묶지 않고 any data type이지만 isRequired 쓰고플 때&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;requiredAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isRequired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Custom validator 함수 (기본)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// It should return an `Error` object if the validation fails. &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Don't `console.warn` or throw, as this won't work inside `oneOfType`.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;customProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/matchme/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Invalid prop `'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'` supplied to'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' `'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'`. Validation failed.'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Custom validator 함수 (`arrayOf`, `objectOf` 사용 버전)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// It should return an `Error` object if the validation fails. &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The validator will be called for each key in the array or object. The first two arguments of the validator are the array or object itself, and the current item's key.&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;customArrayProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propFullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/matchme/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Invalid prop `'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propFullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'` supplied to'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' `'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'`. Validation failed.'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/&quot;&gt;React Documentation&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>jaeyoon</name></author><category term="react"/><summary type="html">### 효과 **컴포넌트 클래스의 `propTypes` 객체를 설정**하면, - 컴포넌트에서 원하는 props의 type &amp; 전달된 props의 type 이 *일치하지 않을 때*, 콘솔에서 오류 메시지가 나타나도록 할 수 있다. - `isRequired`로 필수 pr</summary></entry><entry><title type="html">React에서의 바인딩(Binding) 방법들 (v16+ 기준)</title><link href="http://blog.jaeyoon.io/2018/01/react-bind.html" rel="alternate" type="text/html" title="React에서의 바인딩(Binding) 방법들 (v16+ 기준)"/><published>2018-01-10T03:15:30+00:00</published><updated>2018-01-10T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2018/01/react-bind</id><content type="html" xml:base="http://blog.jaeyoon.io/2018/01/react-bind.html">&lt;blockquote&gt; &lt;p&gt;이 글은 현재 가장 최신인 16.2.0버전의 React를 기준으로 작성되었습니다.&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=&quot;왜-필요한가&quot;&gt;왜 필요한가?&lt;/h3&gt; &lt;p&gt;JavaScript에서 다음 두 코드는 동일하지 &lt;strong&gt;않다&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;결론부터 말하자면 두 번째 코드는 오류가 나게 된다. Binding은 두 번째 코드가 첫번째 코드와 똑같이 작동할 수 있도록 해준다.&lt;/p&gt; &lt;p&gt;React에서는 일반적으로 다른 컴포넌트로 pass할 메소드만 binding하면 된다. 예컨대 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;&lt;/code&gt;에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.handleClick&lt;/code&gt;을 pass하고 있으므로 binding이 필요하다. 반면 &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; 메소드 또는 &lt;a href=&quot;https://hackernoon.com/reactjs-component-lifecycle-methods-a-deep-dive-38275d9d13c0&quot;&gt;lifecycle 메소드&lt;/a&gt;에는 binding이 필요없다. 다른 컴포넌트로 pass되지 않으니깐.&lt;/p&gt; &lt;p&gt;JavaScript에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;에 대해 알아보려면 &lt;a href=&quot;http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/&quot;&gt;여기&lt;/a&gt;를 참고하라.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;어떻게-하는가&quot;&gt;어떻게 하는가?&lt;/h3&gt; &lt;p&gt;함수들이 컴포넌트 attributes 예컨대 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt;에 대한 액서스를 가지도록 하는 방법에는 여러 가지가 있다.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor()&lt;/code&gt; 에서 바인딩&lt;/strong&gt; (ES2015) : &lt;code class=&quot;highlighter-rouge&quot;&gt;this.method.bind(this)&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Click happened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;&lt;strong&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;에서 바인딩&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;this.method.bind(this)&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Click happened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; 에서 Arrow Function으로 바인딩&lt;/strong&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;() =&amp;gt; this.method()&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Click happened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;&lt;strong&gt;4. Class Properties&lt;/strong&gt; (실험적) : &lt;code class=&quot;highlighter-rouge&quot;&gt;method = () =&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Click happened'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://blog.andrewray.me/react-es6-autobinding-and-createclass/&quot;&gt;Andrew Wray&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/faq-functions.html#why-is-binding-necessary-at-all&quot;&gt;React Documentation&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>jaeyoon</name></author><category term="react"/><summary type="html">&gt; 이 글은 현재 가장 최신인 16.2.0버전의 React를 기준으로 작성되었습니다. ### 왜 필요한가? JavaScript에서 다음 두 코드는 동일하지 **않다** ```jsx obj.method(); ``` ```jsx var method = obj.met</summary></entry><entry><title type="html">Jekyll Pagination 젬을 통해 무한 스크롤 만들기</title><link href="http://blog.jaeyoon.io/2018/01/jekyll-paginate.html" rel="alternate" type="text/html" title="Jekyll Pagination 젬을 통해 무한 스크롤 만들기"/><published>2018-01-04T03:15:30+00:00</published><updated>2018-01-04T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2018/01/jekyll-paginate</id><content type="html" xml:base="http://blog.jaeyoon.io/2018/01/jekyll-paginate.html">&lt;p&gt;&lt;strong&gt;jekyll-pagination-v2 젬을 이용하여 블로그를 페이징해보자&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Jekyll은 버전 2에서 버전 3으로 대대적인 업데이트를 했는데, 호환에 신경을 안 썼는지 기존 플러그인들 중 무용지물이 된 것이 수두룩하다. (Hexo가 인기를 끌고 있는 이유 중 하나이기도 하다.)&lt;/p&gt; &lt;p&gt;같은 이유로 &lt;a href=&quot;https://github.com/jekyll/jekyll-paginate&quot;&gt;jekyll-pagination 젬&lt;/a&gt;도 버전 3과 호환이 되기는 하지만 더이상 업데이트하지 않겠다고 선언하여 여러 가지 문제점이 많다. 레포지토리 description에 &lt;code class=&quot;highlighter-rouge&quot;&gt;NO LONGER UNDER ACTIVE DEVELOPMENT as of Jekyll 3: Pagination Generator for Jekyll&lt;/code&gt; 라고 써있고, 최근 이슈들에도 대부분 ‘이제 얜 버렸다’는 답변이 달려 있다.&lt;/p&gt; &lt;p&gt;더 이상 업데이트가 안 되는 대신, &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2&quot;&gt;jekyll-pagination-v2 젬&lt;/a&gt;이 새로이 나왔는데, 문제는 이 녀석이 &lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;github-pages 젬&lt;/a&gt;과 호환이 안된다는 점이다. 그래서 &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis Ci&lt;/a&gt;를 적용해줘야만 하는데, 여간 골치아픈 일이 아니었다. Hexo로 갈아탈까 몇 번이고 생각했지만 테마 직접 만들어야 성에 차는 내 성격상 새로 파는 일이 더 귀찮았다. 아무튼 이 글에서는 우선 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-pagination-v2&lt;/code&gt; 젬 및 내 개인적 취향인 &lt;code class=&quot;highlighter-rouge&quot;&gt;infinite scroll&lt;/code&gt; 적용 방법을 알아보고, 다음 글에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;travis CI&lt;/code&gt;를 통해 디플로이 시키는 방법을 알아보도록 하겠다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1. 기본 페이지네이션&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;규정상 가장 흔한 비밀번호 조건은 영어소문자, 숫자 포함 8자 이상의 비밀번호.&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# GEMFILE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll-paginate-v2&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# _config.yml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-paginate-v2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;per_page&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sort_reverse&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 안 해주면 오래된 것부터 나옴&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;2. 카테고리 페이지네이션&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;여러 가지 구조로 만들 수 있지만, 나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 디렉토리 하나에 포스팅 몰아 넣는 걸 좋아해서 이 방식대로 만들었다. 우선 &lt;code class=&quot;highlighter-rouge&quot;&gt;categories&lt;/code&gt;라는 폴더를 만들고, 그 안에 카테고리별로 페이지를 만들어둔다.&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 디렉토리 구조&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ㄴ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;관심사&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ㄴ&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;카테고리&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;해당 페이지 안에는 이렇게 작성해준다. 아래처럼 설정해두면 페이징된 경로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;카테고리명/번호&lt;/code&gt; 가 될 것이다.&lt;/p&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# categories/카테고리.md&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;관심사&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;IT/테크,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;실리콘밸리,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;추천&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;툴&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;등&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/관심사&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;관심사&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/:num/&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate-v2&lt;/code&gt;를 만든 sverrirs는 페이지네이터에게 혼란이 오지 않도록 아래처럼 url 양식 명시하는 것을 추천한다.&lt;/p&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# _config.yml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/:year/:month/:title.html&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;다 했으면 이제 기본 템플릿 &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/home.html&lt;/code&gt; 에서 아마 &lt;code class=&quot;highlighter-rouge&quot;&gt;site.posts&lt;/code&gt; 였던 것을 &lt;code class=&quot;highlighter-rouge&quot;&gt;paginator.posts&lt;/code&gt;로 바꿔준다. 그 아래에는 페이지네이터 네비게이션도 추가해주면 일단 완성이다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- _layouts/home.html --&amp;gt;&lt;/span&gt; {% for post in paginator.posts %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ post.url | relative_url }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;{{ post.title | escape }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; {% endfor %} {% if paginator.total_pages &amp;gt; 1 %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; {% if paginator.previous_page %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;previous&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ paginator.previous_page_path | prepend: site.baseurl | replace: '//', '/' }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;larr;&lt;/span&gt; 이전&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; {% endif %} {% if paginator.next_page %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;next&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ paginator.next_page_path | prepend: site.baseurl | replace: '//', '/' }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;다음 &lt;span class=&quot;ni&quot;&gt;&amp;amp;rarr;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; {% endif %} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; {% endif %} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;2.1. v1과의 차이점&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;페이지네이션 v2 젬은 v1과 비교했을 때, 네비게이션을 1,2,3,4,5 형식으로 여러 숫자가 뜨도록 하고자 할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;trail&lt;/code&gt; 옵션을 통해 아주 간단하게 추가할 수 있어 훨씬 편리하다. 무엇보다도 &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2/blob/master/README-GENERATOR.md&quot;&gt;Readme.md&lt;/a&gt; 와 &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2/tree/master/examples&quot;&gt;examples&lt;/a&gt; 정리가 너무 잘 되어 있다. 또한 더 복잡한 카테고리/태그를 자동 생성할 수 있는 &lt;a href=&quot;https://github.com/sverrirs/jekyll-paginate-v2/blob/master/README-AUTOPAGES.md&quot;&gt;autopages&lt;/a&gt;도 함께 딸려오는데 지킬 쓰다보면 자연스럽게 필요를 느끼는 아주아주 유용한 기능이니 참고하길 바란다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;3. 무한 스크롤 (Infinite Scroll)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;일단 무한 스크롤은 페이지네이션이 적용되어 있어야 사용 가능하다. 왜냐하면 ajax 처리할 &lt;em&gt;다음 페이지&lt;/em&gt; 가 어떻게든 존재해야하기 때문.&lt;/p&gt; &lt;p&gt;나는 핀트러스트로 유명한 &lt;a href=&quot;https://masonry.desandro.com/&quot;&gt;Masonry&lt;/a&gt; 레이아웃을 쓰고 있기 때문에, 같은 저자가 만든 &lt;a href=&quot;https://infinite-scroll.com/&quot;&gt;Infinite-scroll&lt;/a&gt; 플러그인을 활용했다. vanilla javascript 버전도 있고 jQuery 버전도 있다. 다음과 같은 js 코드를 추가해주면 간단히 적용 가능하다.&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.pager'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;infScroll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InfiniteScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.next'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.grid-item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;outlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msnry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.page-load-status'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hideNav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.pager'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollThreshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'document'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;물론 html도 상응해서 마크업을 해줘야 한다. 나같은 경우는 불러올 포스팅 하나하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;.grid-item&lt;/code&gt; 으로 마크업 되어 있고, 그걸 감싼 컨테이너를 &lt;code class=&quot;highlighter-rouge&quot;&gt;grid&lt;/code&gt;라는 변수로 넣어줬다. 나머지 클래스명들은 위 페이지네이션 네비게이션 마크업과 일치한다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4 id=&quot;ref&quot;&gt;Ref&lt;/h4&gt; &lt;p&gt;https://github.com/sverrirs/jekyll-paginate-v2/tree/master/examples&lt;br /&gt; https://infinite-scroll.com/api.html&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="jekyll"/><summary type="html">**jekyll-pagination-v2 젬을 이용하여 블로그를 페이징해보자** Jekyll은 버전 2에서 버전 3으로 대대적인 업데이트를 했는데, 호환에 신경을 안 썼는지 기존 플러그인들 중 무용지물이 된 것이 수두룩하다. (Hexo가 인기를 끌고 있는 이유 중 하나</summary></entry><entry><title type="html">Git 에러 CRLF will be replaced by LF (혹은 반대) 핸들링하는 방법</title><link href="http://blog.jaeyoon.io/2018/01/git-crlf.html" rel="alternate" type="text/html" title="Git 에러 CRLF will be replaced by LF (혹은 반대) 핸들링하는 방법"/><published>2018-01-03T03:15:30+00:00</published><updated>2018-01-03T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2018/01/git-crlf</id><content type="html" xml:base="http://blog.jaeyoon.io/2018/01/git-crlf.html">&lt;p&gt;&lt;strong&gt;맥/리눅스 이용 개발자와 윈도우 개발자가 협업할 때&lt;/strong&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;왜 발생할까?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;터미널에 &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; 명령어를 입력했는데 다음과 같은 에러가 뜨는 경우가 있다:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;warning: CRLF will be replaced by LF &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;some/file.file. The file will have its original line endings &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;your working directory. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;이는 맥 또는 리눅스를 쓰는 개발자와 윈도우 쓰는 개발자가 Git으로 협업할 때 발생하는 &lt;strong&gt;Whitespace&lt;/strong&gt; 에러다. 유닉스 시스템에서는 한 줄의 끝이 &lt;strong&gt;LF(Line Feed)&lt;/strong&gt;로 이루어지는 반면, 윈도우에서는 줄 하나가 &lt;strong&gt;CR(Carriage Return)&lt;/strong&gt;와 &lt;strong&gt;LF(Line Feed)&lt;/strong&gt;, 즉 &lt;strong&gt;CRLF&lt;/strong&gt;로 이루어지기 때문이다. 따라서 어느 한 쪽을 선택할지 Git에게 혼란이 온 것이다.&lt;/p&gt; &lt;p&gt;유닉스 OS을 쓰고 있다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;CRLF will be replaced by LF in…&lt;/code&gt; 에러 메시지가 뜰 것이고, 윈도우를 사용하고 있다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;LF will be replaced by CRLF in…&lt;/code&gt; 에러 메시지가 뜰 것이다.&lt;/p&gt; &lt;p&gt;둘 중 뭐든간에 해결 방법은 유사같다. Git은 똑똑해서 이를 자동 변환해주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;core.autocrlf&lt;/code&gt; 라는 기능을 가지고 있는데, 이 기능을 켜주기만 하면 된다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;해답은 &lt;code class=&quot;highlighter-rouge&quot;&gt;core.autocrlf&lt;/code&gt; 를 켜는 것!&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;이 기능은 개발자가 git에 코드를 추가했을 때 (예컨대 커밋할 때)에는 CRLF를 LF로 변환해주고, git의 코드를 개발자가 조회할 때 (예컨대 clone한다거나 할 때)에는 LF를 CRLF로 변환해준다.&lt;/p&gt; &lt;p&gt;그러므로 &lt;strong&gt;윈도우 사용자&lt;/strong&gt;의 경우 이러한 변환이 항상 실행되도록 다음과 같은 명령어를 입력한다. 물론 시스템 전체가 아닌 해당 프로젝트에만 적용하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;—global&lt;/code&gt; 을 빼주면 된다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;리눅스나 맥을 사용&lt;/strong&gt;하고 있는 경우, 조회할 때 LF를 CRLF를 변환하는 것은 원하지 않을 것이다. 따라서 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;이라는 명령어를 추가해줌으로써 단방향으로만 변환이 이루어지도록 설정한다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.autocrlf &lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;input &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;혹은 이러한 변환 기능을 원하지 않고, 그냥 &lt;strong&gt;에러 메시지 끄고 알아서 작업하고 싶은 경우&lt;/strong&gt;에는 아래 명령어로 경고메시지 기능인 &lt;code class=&quot;highlighter-rouge&quot;&gt;core.safecrlf&lt;/code&gt;를 꺼주면 된다.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.safecrlf &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4 id=&quot;ref&quot;&gt;Ref&lt;/h4&gt; &lt;p&gt;Git Documentation - &lt;a href=&quot;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#Formatting-and-Whitespace&quot;&gt;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#Formatting-and-Whitespace&lt;/a&gt;&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="Git"/><summary type="html">**맥/리눅스 이용 개발자와 윈도우 개발자가 협업할 때** &gt; 왜 발생할까? 터미널에 `git` 명령어를 입력했는데 다음과 같은 에러가 뜨는 경우가 있다: ```bash warning: CRLF will be replaced by LF in some/file</summary></entry><entry><title type="html">지킬(Jekyll) 포스팅에 이미지 첨부하는 방법 총체적 정리</title><link href="http://blog.jaeyoon.io/2017/12/jekyll-image.html" rel="alternate" type="text/html" title="지킬(Jekyll) 포스팅에 이미지 첨부하는 방법 총체적 정리"/><published>2017-12-30T03:15:30+00:00</published><updated>2017-12-30T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2017/12/jekyll-image</id><content type="html" xml:base="http://blog.jaeyoon.io/2017/12/jekyll-image.html">&lt;h4&gt;&lt;b&gt;경로 설정하기&lt;/b&gt;&lt;/h4&gt; &lt;p&gt;지킬에서 Path를 찾아나갈 때에는 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;에서 정의된 &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;이라는 변수가 사용된다. 이를 위해 아래 이미지에서 알 수 있듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;은 도메인 root path, &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;은 subpath를 말한다. 후자는 사이트가 도메인의 root가 아닌 subpath에 호스팅된 경우에 유용하게 사용된다.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://byparker.com/img/what-is-a-baseurl.jpg&quot; alt=&quot;Jekyll의 이미지 Path&quot; /&gt;&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;//_config.yml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://blog.jaeyoon.io&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;my-baseurl&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;지킬은 기본적으로 YAML Front Matter을 가진 파일이 아니면 Liquid를 프로세싱하지 않는데, 이 YAML Front Matter은 기본적으로 아래 두 줄로 표시된다.&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;따라서 이 두 줄이 추가되지 않은 파일에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ site.baseurl }}&lt;/code&gt;과 같이 위에서 정의한 리퀴드 변수를 사용할 수 없다.&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4&gt;&lt;b&gt;이미지 첨부하기&lt;/b&gt;&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;1. HTML 문법으로&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Absolute URL (절대 경로) - &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;을 앞에 붙여준다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ &quot;/assets/img/image.png&quot; | relative_url }}'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'absolute'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- result : http://blog.jaeyoon.io/my-baseurl/assets/img/image.png --&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Relative URL (상대 경로) - &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;을 앞에 붙여준다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ &quot;/assets/img/image.png&quot; | relative_url }}'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'relative'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- result : /my-baseurl/assets/img/image.png --&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;2. 마크다운(MD) 문법으로&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Jekyll이 사용하는 마크다운-HTML 컨버터인 &lt;code class=&quot;highlighter-rouge&quot;&gt;kramdown&lt;/code&gt; 하에서는 아래 네 가지 방식이 모두 허용된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{{site.url}}/assets/img/image.png&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;http://blog.jaeyoon.io/assets/img/image.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{{&quot;/assets/img/image.png&quot;|&lt;/span&gt; relative_url}}) &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/assets/img/image.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;클래스명, alt값 등은 &lt;code class=&quot;highlighter-rouge&quot;&gt;{:property = &quot;value&quot;}&lt;/code&gt;형태로 붙여주면 된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/assets/img/image.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;{:class=&quot;img-responsive&quot;} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;3. SASS/SCSS 파일 안에서 이미지 불러오기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;YAML Front Matter 블록이 정의된 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.scss&lt;/code&gt; 파일에서 리퀴드 문법으로 사이트 URL 변수를 정의해준다.&lt;/p&gt; &lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// main.scss &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$baseurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{{ site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;그리고 임포트되는 기타 SCSS파일들에서는 이 변수를 사용하여 작업하면 된다.&lt;/p&gt; &lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// custom.scss &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;url(&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$baseurl&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/assets/img/image.png&quot;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;4. defaults 세팅으로 불러오기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;에서 마치 디폴트 레이아웃이 정의되어 있는 것처럼, 같은 방식으로 디폴트 이미지 경로를 지정해준다&lt;/p&gt; &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;assets/img&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;이에 따라 지킬이 생성할 사이트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/img&lt;/code&gt; 경로의 static한 이미지 파일들을 불러올 것이다. 즉 해당 경로의 이미지 파일들은 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;image: true&lt;/code&gt;라는 YML Front Matter를 가지게 되는 것이다. 이러한 설정을 하에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;background-image&lt;/code&gt;를 불러올 때에도 따로 변수를 생성할 필요없이 바로 경로를 적어줘도 된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ % assign image_files = site.static_files | where: &quot;image&quot;, true %} { % for myimage in image_files %} {{ myimage.path }} { % endfor %} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/img&lt;/code&gt;의 모든 파일이 출력되는 결과를 가져온다&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4&gt;&lt;b&gt;이미지 캡션 달기&lt;/b&gt;&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;1. HTML figure 태그&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;포스팅 MD 파일 안에 HTML 태그를 포함시켜도 상관 없기 때문에 귀찮은 방법이지만 일일이 figure 태그로 마크업하는 방법이 있다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ &quot;/assets/img/image.png&quot; | relative_url }}'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'absolute'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;여기에 캡션을 작성합니다.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;2. Custom CSS&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;스타일시트를 커스터마이즈하여 마크다운 문법으로 작성한 결과에 캡션 스타일을 먹이도록 할 수 있다. 예컨대 아래 코드에서는 img 태그 바로 뒤에 나오는 em 태그에만 캡션 스타일을 적용시킨다. em태그 말고도 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 로 사용하는 blockquote 태그, 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;{:.image-caption}&lt;/code&gt; 로 클래스를 정의해서 사용해도 된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{{&quot;/assets/img/image.png&quot;|&lt;/span&gt; relative_url}}) &lt;span class=&quot;ge&quot;&gt;*여기에 캡션을 작성합니다.*&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;위 마크다운은 &lt;code class=&quot;highlighter-rouge&quot;&gt;kramdown&lt;/code&gt;에 의해 아래와 같은 HTML로 변환된다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://blog.jaeyoon.io/assets/img/image.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Image Alt 텍스트&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;em&amp;gt;&lt;/span&gt;여기에 캡션을 작성합니다.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;따라서 CSS는 아래와 같이 커스터마이징해주면 된다. 이 경우, em과 img 태그가 같은 p 태그를 부모로 가지도록 두 태그 사이에 빈 줄이 생기지 않도록 주의해야 한다.&lt;/p&gt; &lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;em&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;.8rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$grey-color-light&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;3. 마크다운 Table&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;표를 이용해도 깔끔한 뷰를 만들 수 있다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image Alt 텍스트&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;{{&quot;/assets/img/image.png&quot;|&lt;/span&gt; relative_url}}) | |:--:| | 여기에 캡션을 작성합니다. | &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://dummyimage.com/600x300/ffd9e5/ffffff&amp;amp;text=like+this+yo&quot; alt=&quot;Image Alt 텍스트&quot; /&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style=&quot;text-align: center&quot;&gt;여기에 캡션을 작성합니다.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;&lt;strong&gt;4. _includes에서 Partial View 만들기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Liquid가 제공하는 기능을 가장 full로 이용하는 방법인데, &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; 폴더에 새로운 html 조각 파일을 만들고, 이를 가져다가 사용하는 것이다. html 조각 파일에는 table 태그를 사용할 수도 있고, figure 태그로 마크업을 할 수도 있다.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- _includes/image.html --&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zoom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ include.url }}'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{{ include.alt }}'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;{{ include.description }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;실제 포스팅을 작성하는 md 파일에서는 아래와 같이 사용하면 된다.&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{% include image.html url='{{&quot;/assets/img/logo.png&quot;| relative_url}}' description='여기에 캡션을 작성합니다.' alt='Image Alt 텍스트' %} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4&gt;&lt;b&gt;Ref&lt;/b&gt;&lt;/h4&gt; &lt;p&gt;jekyll 다큐멘테이션 - http://jekyllrb.com &lt;br /&gt; StackOverFlow - https://stackoverflow.com&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="블로그"/><category term="HTML"/><category term="Jekyll"/><category term="Markdown"/><summary type="html">경로 설정하기 지킬에서 Path를 찾아나갈 때에는 기본적으로 `_config.yml`에서 정의된 `url`과 `baseurl`이라는 변수가 사용된다. 이를 위해 아래 이미지에서 알 수 있듯이 `url`은 도메인 root path, `base</summary></entry><entry><title type="html">jQuery? Vanilla JS? 무엇이 답인가</title><link href="http://blog.jaeyoon.io/2017/12/jquery-free.html" rel="alternate" type="text/html" title="jQuery? Vanilla JS? 무엇이 답인가"/><published>2017-12-24T12:15:30+00:00</published><updated>2017-12-24T12:15:30+00:00</updated><id>http://blog.jaeyoon.io/2017/12/jquery-free</id><content type="html" xml:base="http://blog.jaeyoon.io/2017/12/jquery-free.html">&lt;p&gt;&lt;strong&gt;끊임없는 변화 속에서 중요한 것은 변하지 않는 것&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jQuery의 전성기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;2010년대 초반은 jQuery의 전성기였다. $는 간편했고, AJAX와 애니메이션을 심플하게 만들어 주었으며, 수많은 플러그인이 jQuery 기반으로 나왔다. 이러한 간편함과 플러그인 커뮤니티 덕분에 jQuery는 오랜 시간 큰 사랑을 받았다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;스마트폰의 대두&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;그러나 이제 많은 사람들이 jQuery Free를 외치고 있다. 이는 스마트폰의 시대가 열리면서 본격적이 되었다. 휴대폰에 탑재된 느리고 열등한 CPU와 적은 메모리, 그리고 작은 데이터 대역폭(bandwidth)은 jQuery를 사용하기에 적절하지 못한 환경이었기 때문이다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;모듈화의 시대&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;한 마디로 jQuery는 너무 무겁다. jQuery의 내부적 요소들을 살펴보면, 불필요한 군살들이 너무 많다. 모듈화의 시대에서는 이제 jQuery의 부분부분을 조각내어 단일 목적의 lightweight 라이브러리들이 만들어지고 있다. 사용자의 3G/4G 데이터를 잡아먹지 않도록 말이다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;JavaScript Revolution&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;또한 node.js의 영향도 크다. node.js의 등장과 함께 JS는 더이상 단지 ‘브라우저의 언어’라는 명목에서 벗어나 서버 사이드 언어로 발전했다. 이와 동시에 jQuery는 오로지 client-side에서 DOM을 조작하는 라이브러리라는 점에서 가치가 떨어진다. 이러한 것들은 서버사이드로 전이 가능한 것이 아니기 때문이다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;새로운 프론트엔드 프레임워크/라이브러리&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;결정적으로 현재 React, Angular, Vue처럼 더 직관적이고 최신 기술의 프론트엔드 프레임워크/라이브러리가 등장하면서 jQuery의 인기는 절감되었다.&lt;/p&gt; &lt;p&gt;애니메이션의 경우, GSAP(GreenSock Animation Platform)이라는 애니메이션에만 집중한 라이브러리가 훨씬 더 빠른 성능을 자랑하고 있다. 아래는 GreenSock에서 직접 올린 각종 애니메이션 라이브러리 속도 비교 코드이다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;srfxA&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;GreenSock&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Speed Test: GSAP, CSS Transitions (Zepto), jQuery 3, anime, WAAPI&quot; class=&quot;codepen&quot;&gt;GSAP, Zepto, jQuery, Anime, WAAPI 속도 비교 &lt;a href=&quot;https://codepen.io/GreenSock/pen/srfxA/&quot;&gt;Speed Test: GSAP, CSS Transitions (Zepto), jQuery 3, anime, WAAPI&lt;/a&gt; by GreenSock (&lt;a href=&quot;https://codepen.io/GreenSock&quot;&gt;@GreenSock&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt; &lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vanilla JS&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;jQuery 플러그인들 중 종종 jQuery를 버리고 Vanilla JS 버전을 업데이트하는 경우가 있다. 새로운 라이브러리인가 생각할 수 있지만 &lt;a href=&quot;http://vanilla-js.com&quot;&gt;Vanilla-JS&lt;/a&gt; 웹사이트를 보면 알 수 있듯이 그냥 순수 JavaScript를 일컫는 말이다. Vanilla는 비격식으로 &lt;em&gt;평범한, 특별할 것 없는&lt;/em&gt; 이라는 뜻을 가진 형용사이다. 위 웹사이트에 가서 파일을 다운로드받으면, 0byte에 바로 코딩을 시작하라는 주석 뿐이다. JavaScript 코딩에 있어 프레임워크/라이브러리가 필요하다는 의견을 비꼬기 위해 만들어진 개그 사이트인 것이다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jQuery를 쓰지 못하면 개발 생산성이 떨어지는가?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelector&lt;/code&gt; 쓴다고 효율성이 뚝 떨어지는 건 아니라고 본다. jQuery 선택자는 항상 jQuery Object(마치 array처럼 사용 가능)를 반환하는데 index를 매번 붙여주는 게 가끔은 불편한 경우도 있다. 또한 &lt;a href=&quot;http://youmightnotneedjquery.com/&quot;&gt;You might not need jQuery&lt;/a&gt;에서 볼 수 있듯이 AJAX를 JS로 직접 구현하는 등의 작업도 아주 복잡한 일은 아니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;jQuery Free가 답인가?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;물론 랜딩페이지처럼 간단한 one page application에 있어서는 여전히 jQuery가 강자이다. 또 플러그인 생태계를 생각하면 jQuery Free란 굉장히 아쉬운 아이디어이다. 하지만 테크 업계는 빠르게 변화하고, 변화를 따라가기 위해서는 기존 툴을 버려야 할 때가 온다.&lt;/p&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;이 글은 jQuery를 비난하고, React나 Angular의 중요성을 옹호하고자 한 것이 아니다. 나의 결론은 개발자가 오로지 한 가지 언어와 프레임워크로만 개발을 지속하는 것은 거의 불가능에 가까운 일이므로, 무언가를 버릴 시점에선 버리고 배울 시점에선 배우자는 이야기이다. IT는 그 어느 업계보다 변화가 빠르기에, 경쟁력을 갖추기 위해 중요한 것은 빠르게 변화하는 ‘유행’ 프레임워크가 아니라, 변화에 빠르게 적응하는 감각과 실력을 갖추는 것이다.&lt;/p&gt; &lt;p&gt;​&lt;/p&gt; &lt;p&gt;얼마 전 구글의 UX 엔지니어 김종민 님께서 메일로 &lt;em&gt;UX 엔지니어는 단지 직종일 뿐, 모든 직종이 새로 만들어지고 사라지듯이 이 또한 지금의 유행에 따른 직종&lt;/em&gt; 이라고 말씀하셨던 게 생각난다. 실제로 김종민 님은 단 한 번도 ‘UX 엔지니어’가 되기 위해 공부한 적이 없다고 한다. 즉 중요한 것은 유행을 뒤쫓는 것이 아니라, 개발에 대한 이해나 디자인 감각처럼 &lt;strong&gt;변하지 않는 것을 익히는 것&lt;/strong&gt;이다. 변하지 않는 것을 파악하면, 다른 직종이 나오더라도 적응할 수 있기 때문이다. 세상에 잘하는 사람들은 참 많은데 그 사람들 중에서 내가 독보적인 사람이 되려면 어떤 부분에 흥미를 느끼고 자신이 있는지가 중요하다는 말씀이, 어찌보면 참 교과서적인 말로 들릴 수도 있지만, 김종민 님께서 살아온 삶에 너무 극명히 드러나있어 내 가치관과 진로관에 와닿는다. 그런 의미에서 나는 이 글에서 찾던 ‘답’을 jQuery Free가 아닌, &lt;em&gt;변하지 않는 것&lt;/em&gt; 이라고 정의내리고 싶다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;</content><author><name>jaeyoon</name></author><category term="javascript"/><category term="jQuery"/><category term="vanillaJS"/><summary type="html">**끊임없는 변화 속에서 중요한 것은 변하지 않는 것** - **jQuery의 전성기** 2010년대 초반은 jQuery의 전성기였다. $는 간편했고, AJAX와 애니메이션을 심플하게 만들어 주었으며, 수많은 플러그인이 jQuery 기반으로 나왔다. 이러한 간편</summary></entry><entry><title type="html">광고시장의 변화 - 퍼포먼스 마케팅과 인플루언서 마케팅</title><link href="http://blog.jaeyoon.io/2017/12/influencer.html" rel="alternate" type="text/html" title="광고시장의 변화 - 퍼포먼스 마케팅과 인플루언서 마케팅"/><published>2017-12-22T12:15:30+00:00</published><updated>2017-12-22T12:15:30+00:00</updated><id>http://blog.jaeyoon.io/2017/12/influencer</id><content type="html" xml:base="http://blog.jaeyoon.io/2017/12/influencer.html">&lt;h4&gt;&lt;b&gt;광고단가와 측정가능매체&lt;/b&gt;&lt;/h4&gt; &lt;p&gt;&lt;strong&gt;1. CPM (Cost Per Mille)&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;전통적 방식 마케팅&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;Mille은 언뜻 보면 영어의 Million과 같은 어원으로 착각하기 쉽지만 사실 라틴어로 1000을 의미하는 수사이다. 따라서 CPM은 Cost per 1000 impressions, 즉 &lt;em&gt;광고를 1000회 노출 시키는 데 지불할 비용&lt;/em&gt;을 뜻한다.&lt;/li&gt; &lt;li&gt;이처럼 단순 조회수에 기반한 CPM은 전통적 방식의 마케팅이다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;예: TVC (TV Commercial)&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;2. CPC (Cost Per Click)&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;퍼포먼스 지향 마케팅&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;클릭 당 지불 비용. 넓게 보면 CPC도 CPA의 일종으로 볼 수도 있겠지만, 보통 CPA의 Action은 클릭 이후의 행위를 가리킨다. 또한 광고 과금방식이 CPM -&amp;gt; CPC -&amp;gt; CPA 순으로 진화해왔다면, 아직까지 온라인 광고는 매체의 선호에 의해 CPC 방식을 주로 사용하고 있기에, CPA의 소분류보다는 독립적인 대분류로 본다.&lt;/li&gt; &lt;li&gt;클릭이라는 실질적 아웃풋에 기반한 CPC는 퍼포먼스 지향 마케팅이다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;예: 구글 AdWords의 Dynamic Pricing&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;구글은 어찌보면 하나의 거대한 크롤러이다. 구글은 크롤러가 수집한 웹페이지의 데이터를 가공하여 ‘인덱싱’한 후, &lt;a href=&quot;https://sungmooncho.com/2012/08/26/pagerank/&quot;&gt;페이지랭크(Page Rank)&lt;/a&gt;에 기반한 알고리즘에 의해 검색결과를 띄워준다. 이때 사용자가 검색한 검색 ‘키워드’가 바로 AdWords의 판매상품이 되는 것이다. 구글은 단지 클릭 수에 비례하여 광고 단가를 책정하지 않고, 이 ‘키워드’의 가치에 따라 동적으로 가격을 책정하는 동적 가격전략(Dynamic Pricing)을 쓰고 있다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;3. CPA (Cost Per Action)&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;퍼포먼스 지향 마케팅&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;실제 Action, 즉 실질적 아웃풋에 기반한 CPA는 전통적 방식의 마케팅과 대조되는 퍼포먼스 마케팅 영역에 속한다. 대부분의 광고주가 선호하는 과금 방식.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Action의 종류&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;CPI (Cost Per Installation) : 앱 설치&lt;/li&gt; &lt;li&gt;CPE (Cost Per Engagement) : 앱 실행&lt;/li&gt; &lt;li&gt;CPS (Cost Per Sale) : 구매&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;h4&gt;&lt;b&gt;인플루언서 마케팅&lt;/b&gt;&lt;/h4&gt; &lt;figure&gt; ​ &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/img/171222/influencer.png&quot; alt=&quot;인플루언서&quot; /&gt; ​ &lt;figcaption&gt;인플루언서는 기존 광고 시장 주체들의 경계를 허문다.&lt;/figcaption&gt; &lt;/figure&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;인플루언서란?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;인플루언서(Influencer)란, 말 그대로 영향력 있는 개인을 의미하며 연예인, 이슈 메이커, 소셜스타 등을 포괄한다. &lt;strong&gt;크리에이터(Creator)&lt;/strong&gt;라는 용어도 유사한 의미로 사용되는데, 콘텐츠를 제작하고 주로 SNS를 통해 영향을 미치는 인물로 범위가 좁혀진다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;기존 광고와의 차이점&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;인플루언서를 이용한 마케팅은 기존의 광고 시장에서 벗어나 새로운 시장을 형성하고 있는데, 이는 인플루언서 광고가 가지는 전통적 광고와의 차이 때문이다. 이들은 광고 제작자이자 셀럽이며 유통 매체이다. 물론 페이스북, 유튜브, 인스타그램 등 상위매체가 존재하지만 기본적으로 광고가 게재되는 곳은 해당 플랫폼에서 인플루언서 개인이 가진 페이지이다. 결국 &lt;a href=&quot;/공부/경영학/2017/11/19/nasmedia.html&quot;&gt;전통적 시장에서는 미디어, 미디어 랩사, 에이전시, 그리고 광고 모델이 수행하던 역할&lt;/a&gt;을 거의 대부분 소화해내는 것이다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;인플루언서 마케팅의 전망&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;인플루언서 마케팅은 한국의 온라인 마케팅에서 새로운 트렌드로 자리잡고 있다. 불특정 다수를 팬덤으로 보유한 셀러브리티 마케팅과는 달리, 인플루언서 마케팅은 스포츠, 패션, 애완동물 애호가 등의 세분된 타깃 집단을 공략할 수 있으며, 적은 예산으로 린(lean)한 고객 개발을 위한 실질적 프로세스를 제공한다는 측면에서 주목할만하다.&lt;/p&gt; &lt;p&gt;실제로 해외에서는 이미 대기업이 인플루언서 MCN 또는 에이전시를 인수한 사례가 여럿 있다. Disney는 Maker를, Warner Bros.는 Machinima를, Dreamworks는 AwesomenessTV를, 그리고 Google은 Famebit을 인수했다. 국내 MCN이나 에이전시의 경우 투자유치 사례는 많지만 아직까지 대기업이 인수한 사례는 없는데, 곧 이런 사례가 나오지 않을까 싶다.&lt;/p&gt; &lt;p&gt;물론 긍정적인 전망만 있는 것은 아니다. 인플루언서가 점차 늘어나면서 대중은 노출에 무뎌지기 시작했고 인플루언서는 차별화를 위해 이전보다 노력해야 한다. 예컨대 ‘숙제’라는 단어가 등장했는데, 이는 인플루언서가 특정 제품이나 서비스를 노출해도 광고라는 것을 인지하고 야유를 던지는 상황에서 사용된다. 이와 같이 인플루언서 마케팅 시장의 성장은 매력적인 기회이지만, 어떤 모델로 접근해야 할지에 대한 고민은 계속해서 필요할 것이다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;p&gt;&lt;strong&gt;참조&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://www.forbes.com/sites/kylewong/2014/09/10/the-explosive-growth-of-influencer-marketing-and-what-it-means-for-you/#1146199252ac&quot;&gt;The Explosive Growth of Influencer Marketing and What It Means For You&lt;/a&gt;, Forbes, 2014.09.10.&lt;br /&gt;&lt;a href=&quot;https://brunch.co.kr/@yogathumb/18&quot;&gt;인플루언서에 대한 몇 가지 정의들&lt;/a&gt;, 네안데르탈인, 2017.02.01.&lt;br /&gt;그리고 미나언니&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="광고"/><category term="인플루언서"/><category term="퍼포먼스마케팅"/><summary type="html">광고단가와 측정가능매체 **1. CPM (Cost Per Mille)** - **전통적 방식 마케팅** - Mille은 언뜻 보면 영어의 Million과 같은 어원으로 착각하기 쉽지만 사실 라틴어로 1000을 의미하는 수사이다. 따라서</summary></entry><entry><title type="html">지킬(Jekyll)에서 name Syntax 에러가 나는 경우</title><link href="http://blog.jaeyoon.io/2017/11/jekyll-es6.html" rel="alternate" type="text/html" title="지킬(Jekyll)에서 name Syntax 에러가 나는 경우"/><published>2017-11-30T03:15:30+00:00</published><updated>2017-11-30T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2017/11/jekyll-es6</id><content type="html" xml:base="http://blog.jaeyoon.io/2017/11/jekyll-es6.html">&lt;p&gt;&lt;strong&gt;Error: SyntaxError: Unexpected token: name (변수명)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;지킬에서 위와 같은 에러를 받으면 굉장히 황당하다. 어디에 syntax error가 있다는 거지? 하며 방금 수정한 코드에 오타가 있는지 살펴보지만 어디에도 에러는 없다. 나같은 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;Error: SyntaxError: Unexpected token: name (header)&lt;/code&gt; 라고 에러가 떠서 혹시나 하고 애꿎은 &lt;code class=&quot;highlighter-rouge&quot;&gt;header.html&lt;/code&gt; 을 거듭 확인해봤지만 문제를 찾을 수 없었다.&lt;/p&gt; &lt;p&gt;해답은 구글링을 통해 꽤 쉽게 찾을 수 있었는데, 원인 제공자는 바로 &lt;strong&gt;EcmaScript6&lt;/strong&gt;이었다. 지킬은 기본적으로는 ES6+ 코드를 이해하지 못한다. 나의 경우 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt; 라는 let 변수를 선언했는데, 이것이 문제가 되었던 것이다.&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Jekyll-Babel을 깔자&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;어쨌거나 이 문제를 핸들링하는 것은 굉장히 쉽다. &lt;a href=&quot;https://github.com/babel/jekyll-babel&quot;&gt;지킬을 위한 Babel 컨버터&lt;/a&gt;가 이미 만들어져 있으니 설치만 하면 되기 때문이다. 늘 그렇듯 다음과 같은 과정을 거치면 완성이다.&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jekyll-babel'&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# terminal&lt;/span&gt; bundle &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# _config.yml&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-babel&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;또한 이러한 설정이 적용되려면 컴파일하려는 해당 파일 상단에 아래처럼 yml front matter를 포함시켜주어야 한다.&lt;/p&gt; &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4 id=&quot;ref&quot;&gt;Ref&lt;/h4&gt; &lt;p&gt;https://github.com/babel/jekyll-babel&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="jekyll"/><summary type="html">**Error: SyntaxError: Unexpected token: name (변수명)** 지킬에서 위와 같은 에러를 받으면 굉장히 황당하다. 어디에 syntax error가 있다는 거지? 하며 방금 수정한 코드에 오타가 있는지 살펴보지만 어디에도 에러는 없다. 나</summary></entry><entry><title type="html">StackOverFlow에 Example Code를 첨부해야하는 또다른 이유</title><link href="http://blog.jaeyoon.io/2017/11/stackoverflow.html" rel="alternate" type="text/html" title="StackOverFlow에 Example Code를 첨부해야하는 또다른 이유"/><published>2017-11-21T12:15:30+00:00</published><updated>2017-11-21T12:15:30+00:00</updated><id>http://blog.jaeyoon.io/2017/11/stackoverflow</id><content type="html" xml:base="http://blog.jaeyoon.io/2017/11/stackoverflow.html">&lt;p&gt;&lt;strong&gt;Safari에서 animation-play-state 버그 디버깅하기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;StackOverFlow에 질문을 할 때, Preview 코드를 첨부하지 않으면 -1를 받기 십상이다. 반드시 StackOverFlow에 있는 &lt;a href=&quot;https://stackoverflow.com/help/mcve&quot;&gt;Example Code 작성법 포스팅&lt;/a&gt;을 참고하여 Minimal, Complete, and Verifiable Example, 소위 MCVE를 함께 첨부하고, 사전에 리서치를 충분히 했다는 인상을 확실히 남겨주어야 한다. 가장 큰 이유는 이런 노력을 통해 Reputation 점수를 확보하지 않으면 이용할 수 있는 기능이 굉장히 제한되기 때문이다. 특히 인상깊었던 제한 정책 중 하나는 StackOverFlow가 질문글에 달 수 있는 태그까지 Reputation 점수에 따라 차별화시킨다는 것. 더 구체적이고 전문적인 태그를 달수록 질 좋은 답변이 달릴 확률이 높아지기 때문에, 논리적으로 충분히 차별화 포인트가 된다.&lt;/p&gt; &lt;figure&gt; &lt;img data-action=&quot;zoom&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*ZkkpjuqrWTVNPxGqRR-CHQ.png&quot; alt=&quot;StackOverFlow 질문의 Reputation 점수와 Example Code 예시&quot; /&gt; &lt;figcaption&gt; StackOverFlow 질문의 Reputation 점수와 Example Code 예시 &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;하지만 내가 이 글에서 말하고자 하는 바는 Reputation 외에도 Example Code가 유용한 또다른 이유이다. 바로 Full Code를 StackOverFlow에서 요구하는 대로 Minimal, Complete, and Verifiable하게 바꾸는 과정에서 답을 찾기가 쉽기 때문. 즉 &lt;strong&gt;질문을 올리기 전에 질문을 쓰는 과정에서 답을 스스로 찾게 되는 것&lt;/strong&gt;이다. 필요 없다고 생각이 드는 부분을 하나씩 지워나가면서 코드 리뷰를 하게 되고 그 과정에서 문제를 일으키는 부분이 눈에 들어올 때가 많다.&lt;/p&gt; &lt;p&gt;나의 경우 포트폴리오 웹을 만들면서 Three.js 없이 CSS3 3d Transform만으로 3d animation을 구현하려 이것저것 시도를 많이 했는데, IE는 당연하지만 유난히 Safari에서 알 수 없는 에러가 굉장히 많았다. JS로 한 요소의 transform 값을 바꾸니 자꾸만 괴상한 자리로 가는 것이다. 심지어 Inspector조차 element를 선택하면 올바른 자리에 있다고 말하고, 콘솔에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;getComputedStyle&lt;/code&gt; 을 이용해봐도 올바른 값을 가지고 있다고 이야기해 도저히 디버깅을 할 수가 없었다.&lt;/p&gt; &lt;p&gt;그래서 StackOverFlow에 질문글을 올리기로 결심했고, 방대한 양의 코드를 전부 첨부할 수는 없으니 질문의 핵심이 되는 코드만 남겨두고 다른 코드를 하나씩 정리하기 시작했다. 그런데 웬걸, &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-play-state: paused&lt;/code&gt; 가 있던 줄을 삭제하니 완벽하게 워킹하는 것이다. 처음에는 SCSS 컴파일러를 없앤 타이밍에 제대로 작동하기 시작해서 SCSS 컴파일러 문제인 줄 알았다. 하지만 조금 더 코드를 살펴보니 Safari에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;transform: rotateY()&lt;/code&gt; 값과 &lt;code class=&quot;highlighter-rouge&quot;&gt;animation-play-state: paused&lt;/code&gt; 가 conflict를 일으키는 모양이다. 또 &lt;code class=&quot;highlighter-rouge&quot;&gt;.getComputedStyle&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;.getPropertyValue&lt;/code&gt; 로 리턴되는 transform matrix가 keyframes animation으로 바뀐 transform 값이 아닌 element에 적용된 본래의 transform 값이다. 이때문에 결국 safari에선 animation이 smooth하지 않지만 (하려면 할 수 있겠으나 코드를 더럽히기도 싫고 귀찮다…) 어찌 됐든 전혀 다른 position을 가지게 되던 큰 문제는 해결되었다.&lt;/p&gt; &lt;figure&gt; &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/img/171121/bug1.png&quot; alt=&quot;Safari Animation-play-state 버그&quot; /&gt; &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/img/171121/bug2.png&quot; alt=&quot;Safari Animation-play-state 버그 - 콘솔&quot; /&gt; &lt;figcaption&gt; Safari에서 발생하는 Animation-play-state 버그 (Console에 뜨는 위치값과 브라우저 상에 렌더링되는 위치가 전혀 다른 것을 확인할 수 있다.) &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;이런 브라우저 호환성 이슈들은 참 태클하기 싫은 어려운 문제다. 아래 깃헙 스크린샷을 보면 Mobile Compatibility 테스팅하다가 분노에 휩싸인 나의 커밋 메시지를 볼 수 있다. 특히 크롬에서 완벽하게 작동하는 것을 확인한 채 뿌듯한 마음으로 모바일 브라우저를 켰을 때 괴상한 광경을 목격한 순간의 감정은 말로 표현할 수 없다. 아래는 내가 당시 느낀 그 감정을 듬뿍 담아 작성했던 커밋 메시지 내역이다.&lt;/p&gt; &lt;figure&gt; &lt;img data-action=&quot;zoom&quot; src=&quot;/assets/img/171121/commit.png&quot; alt=&quot;분노의 Commit 내역&quot; /&gt; &lt;figcaption&gt; 분노의 Commit 내역 &lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;그럼에도 불구하고 디버깅이 즐거운 것은, 이 모든 에러를 해결하고 나면 극도의 쾌감을 맛볼 수 있기 때문이다. 더 많은 분노를 일으킨 버그였을 수록 해결되었을 때 더 높은 쾌감을 선사한다. 뭐 개발이 아니라 그 어떤 일도 마찬가지이로 시행착오가 있을 때, 일을 마무리짓고 나면 결과물에 대한 애정과 보람이 더 크지 않나 싶다. 아무튼 내 포트폴리오 웹은 이런 식으로 완성이 되었다. 결과적으로 돌이켜보면 고집부리지 말고 유료 플러그인이나 three.js 같은 라이브러리 가져다 쓰는 게 현명했던 것 같기도 하지만, 어찌되었든 다양한 고민을 안겨준 즐거운 시간이었다.&lt;/p&gt;</content><author><name>jaeyoon</name></author><category term="StackOverFlow"/><category term="커뮤니티"/><category term="브라우저호환성"/><summary type="html">**Safari에서 animation-play-state 버그 디버깅하기** StackOverFlow에 질문을 할 때, Preview 코드를 첨부하지 않으면 -1를 받기 십상이다. 반드시 StackOverFlow에 있는 [Example Code 작성법 포스팅](http</summary></entry><entry><title type="html">미국 교환학생 후기 - 목표편</title><link href="http://blog.jaeyoon.io/2017/11/exchange-goal.html" rel="alternate" type="text/html" title="미국 교환학생 후기 - 목표편"/><published>2017-11-20T03:15:30+00:00</published><updated>2017-11-20T03:15:30+00:00</updated><id>http://blog.jaeyoon.io/2017/11/exchange-goal</id><content type="html" xml:base="http://blog.jaeyoon.io/2017/11/exchange-goal.html">&lt;p&gt;&lt;strong&gt;나는 왜 2학년 2학기에 미국 교환학생을 가기로 선택했는가&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;들어가기에 앞서 우선 제가 교환학생을 간 이유를 곱씹어보고자 합니다. 국제협력본부에서 주관하는 중앙 교환학생 프로그램은 미국을 선택할 경우 최소 3학년 1학기부터 다녀올 수 있게 되어있습니다. 경영대 교환학생 프로그램의 경우 학기 제한이 아닌 전공 학점 수 제한이라, 전공 과목을 몰아 들으니 조건을 충족할 수 있었지만, 여전히 가고 싶었던 미 서부 지역의 학교들은 고학년을 선호한다는 어려움이 있었습니다. 또 개인적인 사정으로 교환학생을 미룰 만한 이유가 여럿 생기기도 했습니다. 그럼에도 불구하고 어렵게 어렵게 2학년 2학기에 미국으로 교환학생을 다녀온 것은 다음과 같은 이유에서입니다.&lt;/p&gt; &lt;p&gt;저는 &lt;em&gt;한국에서는 학점이라든지 인간관계라든지 자꾸만 새로운 우선순위가 생겨 하지 못했던 일들&lt;/em&gt;을 비교적 여유로운 교환학생 기간 동안 해결하고자 하였습니다. 즉 늘 머릿속으로만 해야지 생각하고 실천은 못하던 것들을 하나씩 일부분이라도 행동으로 옮기는 것입니다. 그리고 이는 교환학생 기간이 &lt;em&gt;비교적 여유로워야 한다&lt;/em&gt;는 전제 하에 가능한 것이기에, 최대한 일찍 여유가 많은 저학년 때 이와 같은 시기를 가지고 싶었던 것입니다. 이러한 목적 하에 저는 다음 네 가지를 파견 기간 동안의 이정표로 삼았습니다.&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;그간 해온 것과 앞으로 해야할 것을 정리하는 시간 가지기&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;최인훈의 소설 ‘광장’에는 ‘&lt;em&gt;사람이 이루어 놓은 것에 눈을 돌리지 않고, 이루어야 할 것에만 눈을 돌리면, 그 자리에서 그는 삶의 힘을 잃는다&lt;/em&gt;.’ 라는 구절이 등장합니다. 늘 이루어야 할 것에만 정신이 팔려 이루어 놓은 것을 제대로 돌아본 적이 없다는 생각에 교환학생 기간 동안에는 그간 해온 것들을 정리하고 포트폴리오를 만들겠다는 계획을 세웠습니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;실리콘밸리 방문 및 선배와의 만남&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;늘 꿈꿔오던 실리콘밸리를 직접 확인하고, 진로를 구체화시키기 위해 실리콘밸리에 계신 한인 동문들을 만나뵙고자 하였습니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;개발 실력 향상&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;매번 우선순위에서 밀려났던 여러 개발 공부를 이번 기회에 제대로 하고자 하였습니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;체력 향상&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;사실 이 목표는 중도에 거의 포기하다시피 해서 적을까 말까 고민을 많이 했는데, 떨어진 체력을 회복하는 것이 또 하나의 중요한 목표였습니다.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;반면 아래 세 가지는 많은 교환학생 친구들이 중요시하는 부분이지만, 저의 경우 &lt;strong&gt;후순위&lt;/strong&gt;로 삼았던 사항입니다.&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;여행&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;저는 ‘세상 방방곡곡을 누비겠어!’식의 욕심은 별로 없는 사람이라, 주변에서 누군가 제안하지 않는 이상 자발적으로 여행을 간 것은 실리콘밸리가 있는 Bay Area 뿐이었습니다. 물론 낯선 곳에서 다양한 사람들과 함께 낭만적인 시간을 보내는 것도 참 좋아하지만,비용과 시간을 고려했을 때 다른 일들이 더 우선시 되었습니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;미국 대학 문화&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;미드에 종종 등장하던 Fraternity/Sorority문화나 Party 문화에 대한 궁금증은 있었으나, 초반에 한두 번 체험만 해봤을 뿐, 지속적으로 참여하진 않았습니다. 프랑스에서 온 제 룸메이트는 완전히 party-person 이었는데, 보면서 미국 대학 문화를 온전히 즐기는 데만 해도 굉장한 체력과 시간과 비용이 필요함을 알 수 있었습니다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;학업 성적&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;교환학생 담당자 선생님께는 공부를 열심히 하겠다며 면접을 봤던지라 죄송한 마음이지만, 적어도 파견 기간 동안은 학업 성적에 대한 부담을 버리려 했습니다. 학점관리가 바로 한국에서 끊임없이 발생하던 ‘우선순위’의 대표적인 녀석이며 내가 원하고 내게 더 필요한 공부를 하는 데 오히려 방해된다고 판단했기 때문입니다. 이를 위해 학기 초에 위에서 언급한 개발 실력 향상 용도의 두 과목만 Letter Grade, 나머지는 모두 Pass/Fail로 신청을 했습니다.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;아래는 본격적으로 제가 교환학생 기간 동안 경험했던 것들을 기록한 포스팅들입니다. 전체적으로 앞에서 언급했던 네 가지 이정표가 모든 이야기에 조금씩 다 녹아 있지만, 특별히 관련이 깊은 것을 고르자면, 여행편은 두 번째 목표, 수업편은 세 번째 목표, 요리/운동편은 네 번째 목표, 인턴편은 두세 번째 목표와 특히 연결지을 수 있습니다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/%EA%B2%BD%ED%97%98/%EA%B5%90%ED%99%98%ED%95%99%EC%83%9D/2017/11/26/exchange-travel.html&quot;&gt;[&lt;strong&gt;여행편&lt;/strong&gt;] 살면서 한 번쯤 꼭 살아보고 싶은 곳: Bay Area&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/%EA%B2%BD%ED%97%98/%EA%B5%90%ED%99%98%ED%95%99%EC%83%9D/2017/11/27/exchange-internship.html&quot;&gt;[&lt;strong&gt;인턴편&lt;/strong&gt;] 실리콘밸리 스타트업 ‘차트메트릭’에서 인턴을 하다&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/%EA%B2%BD%ED%97%98/%EA%B5%90%ED%99%98%ED%95%99%EC%83%9D/2017/12/27/exchange-class.html&quot;&gt;[&lt;strong&gt;수업편&lt;/strong&gt;] USC에서 들은 최고의 강의: Interactive Web Development&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/%EA%B2%BD%ED%97%98/%EA%B5%90%ED%99%98%ED%95%99%EC%83%9D/2017/12/16/exchange-diet.html&quot;&gt;[&lt;strong&gt;요리/운동편&lt;/strong&gt;] 미국에서의 다이어트 도전과 실패&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/%EA%B2%BD%ED%97%98/%EA%B5%90%ED%99%98%ED%95%99%EC%83%9D/2017/12/16/exchange-club.html&quot;&gt;[&lt;strong&gt;번외편&lt;/strong&gt;] 기숙사, 동아리, 친구들 등 이야기 조각들&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;</content><author><name>jaeyoon</name></author><category term="교환학생"/><category term="미국"/><category term="미서부"/><category term="USC"/><summary type="html">**나는 왜 2학년 2학기에 미국 교환학생을 가기로 선택했는가** 들어가기에 앞서 우선 제가 교환학생을 간 이유를 곱씹어보고자 합니다. 국제협력본부에서 주관하는 중앙 교환학생 프로그램은 미국을 선택할 경우 최소 3학년 1학기부터 다녀올 수 있게 되어있습니다. 경영대 교</summary></entry></feed>